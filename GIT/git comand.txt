
Основные GIT команды
git config
Одна из самых часто используемых git команд. Она может быть использована для указания пользовательских настроек, таких как электронная почта, имя пользователя, формат и т.д. К примеру, данная команда используется для установки адреса электронной почты:

git config --global user.email адрес@gmail.com
git init
Эта команда используется для создания GIT репозитория. Пример использования:

git init
git add
Команда git add может быть использована для добавления файлов в индекс. К примеру, следующая команда добавит файл под названием temp.txt присутствующий в локальном каталоге в индекс:

git add temp.txt
git clone
Команда git clone используется для клонирования репозитория. Если репозиторий находится на удаленном сервере, используется команда такого рода:

git clone имя.пользователя@хост:/путь/до/репозитория
И наоборот, для клонирования локального репозитория используйте:

git clone /путь/до/репозитория
git commit
Команда git commit используется для коммита изменений в файлах проекта. Обратите внимание, что коммиты не сразу попадают на удаленный репозиторий. Применение:

git commit –m “Сообщение идущее вместе с коммитом”
git status
Команда git status отображает список измененных файлов, вместе с файлами, которые еще не были добавлены в индекс или ожидают коммита. Применение:

git status
git push
git push еще одна из часто используемых git команд. Позволяет поместить изменения в главную ветку удаленного хранилища связанного с рабочим каталогом. Например:

git push origin master
git checkout
Команда git checkout может быть использована для создания веток или переключения между ними. К примеру, следующий код создаст новую ветку и переключится на нее:

command git checkout -b <имя-ветки>
Чтобы просто переключиться между ветками используйте:

git checkout <имя-ветки>
git remote
Команда позволяет пользователю подключиться к удаленному репозиторию. Данная команда отобразит список удаленных репозиториев, настроенных в данный момент:

git remote –v
Эта команда позволит пользователю подключить локальный репозиторий к удаленному серверу:

git remote add origin <адрес.удаленного.сервера>
git branch
Команда git branch может быть использована для отображения, создания или удаления веток. Для отображения всех существующих веток в репозитории введите:

git branch
Для удаления ветки:

git branch –d <имя-ветки>
git pull
Команда pull используется для объединения изменений, присутствующих в удаленном репозитории, в локальный рабочий каталог. Применение:

git pull
git merge
Команда git merge используется для объединения ветки в активную ветвь. Применение:

git merge <имя-ветки>
git diff
Команда git diff используется для выявления различий между ветками. Для выявления различий с базовыми файлами, используйте

git diff --base <имя-файла>
Следующая команда используется для просмотра различий между ветками, которые должны быть объединены, до их объединения:

git diff <ветвь-источник> <ветвь-цель>
Для простого отображения существующих различий, используйте:

git diff
git tag
Используется для маркировки определенных коммитов с помощью простых меток. Примером может быть эта команда:

git tag 1.1.0 <вставьте-commitID-здесь>
git log
Запуск команды git log отобразит список всех коммитов в ветке вместе с соответствующими сведениями. Пример результата:

commit 15f4b6c44b3c8344caasdac9e4be13246e21sadw
Author: Alex Hunter <alexh@gmail.com>
Date:   Mon Oct 1 12:56:29 2016 -0600
git reset
Команда git reset используется для сброса индекса и рабочего каталога до последнего состояния коммита. Применение:

git reset --hard HEAD
git rm
git rm используется для удаления файлов из индекса и рабочего каталога. Применение:

git rm имяфайла.txt
git stash
Возможно одна из самых малоизвестных команд git. Она помогает в сохранении изменений на временной основе, эти изменения не попадут в коммит сразу. Применение:

git stash
git show
Для просмотра информации о любом git объекте используйте команду git show. Для примера:

git show
git fetch
git fetch позволяет пользователю доставить все объекты из удаленного репозитория, которые не присутствуют в локальном рабочем каталоге. Пример применения:

git fetch origin
git ls-tree
Команда git ls-tree используется для просмотра дерева объекта вместе с названием, режимом каждого предмета и значением SHA-1. К примеру:

git ls-tree HEAD
git cat-file
Используйте команду git cat-file, чтобы просмотреть тип объекта с помощью SHA-1 значения. Например:

git cat-file –p d670460b4b4aece5915caf5c68d12f560a9fe3e4
git grep
git grep позволяет пользователю проводить поиск фраз и слов в содержимом деревьев. К примеру, для поиска www.hostinger.ru во всех файлах используйте эту команду:

git grep "www.hostinger.ru"
gitk
gitk — это графический интерфейс локального репозитория. Вызвать его можно выполнив данную команду:

gitk
git instaweb
С помощью команды git instaweb можно запустить веб-сервер, связанный с локальным репозиторием. Браузер также автоматически будет перенаправляться на него. Например:

git instaweb –httpd=webrick
git gc
Для оптимизации репозитория используйте команду git gc. Она поможет удалить и оптимизировать ненужные файлы:

git gc
git archive
Команда git archive позволяет пользователю создать .zip или .tar файл содержащий компоненты одного из деревьев репозитория. Например:

git archive --format=tar master
git prune
С помощью команды git prune удаляются объекты, не имеющие никаких входящих указателей. Применение:

git prune
git fsck
Чтобы выполнить проверку целостности файловой системы git, используйте команду git fsck, при этом будут идентифицированы все поврежденные объекты:

git fsck
git rebase
Команда git rebase используется для применения коммитов в другой ветке. Например:

git rebase master